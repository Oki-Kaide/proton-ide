<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <title>Contract Tests</title>
    <link rel="stylesheet" href="https://unpkg.com/mocha/mocha.css" />
  </head>
  <body>
    <div id="mocha"></div>
    <script src="https://unpkg.com/mocha/mocha.js"></script>
    <script src="https://unpkg.com/chai/chai.js"></script>
    <script src="https://unpkg.com/@jafri/vert@0.1.35/dist/bundle.js"></script>
    <script class="mocha-init">
      mocha.setup('bdd');
      mocha.checkLeaks();
    </script>

    <script type="module">
      const { expect } = chai;
      const { Blockchain, expectToThrow } = Vert;

      /* Create Blockchain */
      const blockchain = new Blockchain();

      /* Create Contracts and accounts */
      const kvContract = blockchain.createAccount({
        name: 'kv',
        wasm: INJECT_WASM,
        abi: INJECT_ABI,
        sendsInline: true
      });

      blockchain.createAccounts('account1', 'account2', 'account3');

      /* Runs before each test */
      beforeEach(async () => {
        blockchain.resetTables();
      });

      /* Helpers */
      const getKvRows = () => kvContract.tables.kvs().getTableRows();
      function objectToKv(obj) {
        return Object.entries(obj).map(([k, v]) => ({ key: k, value: v }));
      }

      /* Tests */
      describe('Balance', () => {
        describe('Check Authorizations', () => {
          it('updatevalues: Only actor can call', async () => {
            await kvContract.actions
              .updatevalues(['account1', objectToKv({ telegram: '@proton' })])
              .send('account1@active');

            await expectToThrow(
              kvContract.actions
                .updatevalues(['account1', objectToKv({ telegram: '@proton' })])
                .send('kv@active'),
              'missing required authority account1'
            );
          });

          it('removekeys: Only actor can call', async () => {
            await kvContract.actions
              .updatevalues(['account1', objectToKv({ telegram: '@proton' })])
              .send('account1@active');

            await expectToThrow(
              kvContract.actions
                .removekeys(['account1', objectToKv({ telegram: '@proton' })])
                .send('kv@active'),
              'missing required authority account1'
            );
          });
        });

        describe('Add and remove Values', () => {
          it('Add and remove 1 value from 1 actor', async () => {
            const values = objectToKv({ telegram: '@proton' });
            await kvContract.actions
              .updatevalues(['account1', values])
              .send('account1@active');
            expect(getKvRows()).to.be.deep.equal([
              {
                account: 'account1',
                values: values,
              },
            ]);

            await kvContract.actions
              .removekeys(['account1', values.map((_) => _.key)])
              .send('account1@active');
            expect(getKvRows()).to.be.deep.equal([]);
          });

          it('Add and remove 3 values from 1 actor', async () => {
            const values = objectToKv({
              telegram: '@proton',
              discord: '#proton',
              twitter: '@protonxpr',
            });
            await kvContract.actions
              .updatevalues(['account1', values])
              .send('account1@active');
            expect(getKvRows()).to.be.deep.equal([
              {
                account: 'account1',
                values: values,
              },
            ]);

            await kvContract.actions
              .removekeys(['account1', ['telegram']])
              .send('account1@active');
            expect(getKvRows()).to.be.deep.equal([
              {
                account: 'account1',
                values: values.filter((_) => _.key !== 'telegram'),
              },
            ]);

            await kvContract.actions
              .removekeys(['account1', values.map((_) => _.key)])
              .send('account1@active');
            expect(getKvRows()).to.be.deep.equal([]);
          });

          it('Add 3 values from 3 actors', async () => {
            const values1 = objectToKv({
              telegram: '@proton',
              discord: '#proton',
              twitter: '@protonxpr',
            });
            const values2 = objectToKv({
              telegram: '@metal',
              discord: '#metal',
              twitter: '@metalpays',
            });
            const values3 = objectToKv({
              telegram: '@loan',
              discord: '#loan',
              twitter: '@loanproton',
            });

            await kvContract.actions
              .updatevalues(['account1', values1])
              .send('account1@active');
            await kvContract.actions
              .updatevalues(['account2', values2])
              .send('account2@active');
            await kvContract.actions
              .updatevalues(['account3', values3])
              .send('account3@active');
            expect(getKvRows()).to.be.deep.equal([
              {
                account: 'account1',
                values: values1,
              },
              {
                account: 'account2',
                values: values2,
              },
              {
                account: 'account3',
                values: values3,
              },
            ]);

            await kvContract.actions
              .removekeys(['account1', ['telegram']])
              .send('account1@active');
            await kvContract.actions
              .removekeys(['account2', values2.map((_) => _.key)])
              .send('account2@active');
            await kvContract.actions
              .removekeys(['account3', ['twitter']])
              .send('account3@active');
            expect(getKvRows()).to.be.deep.equal([
              {
                account: 'account1',
                values: values1.filter((_) => _.key !== 'telegram'),
              },
              {
                account: 'account3',
                values: values3.filter((_) => _.key !== 'twitter'),
              },
            ]);

            await kvContract.actions
              .removekeys(['account1', values1.map((_) => _.key)])
              .send('account1@active');
            await kvContract.actions
              .removekeys(['account3', values3.map((_) => _.key)])
              .send('account3@active');
            expect(getKvRows()).to.be.deep.equal([]);
          });
        });
      });
    </script>

    <script class="mocha-exec">
      mocha.run();
    </script>
  </body>
</html>
